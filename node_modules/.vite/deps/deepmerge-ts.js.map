{
  "version": 3,
  "sources": ["../../deepmerge-ts/dist/index.mjs"],
  "sourcesContent": ["/**\n * Special values that tell deepmerge to perform a certain action.\n */\nconst actions = {\n    defaultMerge: Symbol(\"deepmerge-ts: default merge\"),\n    skip: Symbol(\"deepmerge-ts: skip\"),\n};\n/**\n * Special values that tell deepmergeInto to perform a certain action.\n */\nconst actionsInto = {\n    defaultMerge: actions.defaultMerge,\n};\n\n/**\n * The default function to update meta data.\n *\n * It doesn't update the meta data.\n */\nfunction defaultMetaDataUpdater(previousMeta, metaMeta) {\n    return metaMeta;\n}\n/**\n * The default function to filter values.\n *\n * It filters out undefined values.\n */\nfunction defaultFilterValues(values, meta) {\n    return values.filter((value) => value !== undefined);\n}\n\n/**\n * The different types of objects deepmerge-ts support.\n */\nvar ObjectType;\n(function (ObjectType) {\n    ObjectType[ObjectType[\"NOT\"] = 0] = \"NOT\";\n    ObjectType[ObjectType[\"RECORD\"] = 1] = \"RECORD\";\n    ObjectType[ObjectType[\"ARRAY\"] = 2] = \"ARRAY\";\n    ObjectType[ObjectType[\"SET\"] = 3] = \"SET\";\n    ObjectType[ObjectType[\"MAP\"] = 4] = \"MAP\";\n    ObjectType[ObjectType[\"OTHER\"] = 5] = \"OTHER\";\n})(ObjectType || (ObjectType = {}));\n/**\n * Get the type of the given object.\n *\n * @param object - The object to get the type of.\n * @returns The type of the given object.\n */\nfunction getObjectType(object) {\n    if (typeof object !== \"object\" || object === null) {\n        return 0 /* ObjectType.NOT */;\n    }\n    if (Array.isArray(object)) {\n        return 2 /* ObjectType.ARRAY */;\n    }\n    if (isRecord(object)) {\n        return 1 /* ObjectType.RECORD */;\n    }\n    if (object instanceof Set) {\n        return 3 /* ObjectType.SET */;\n    }\n    if (object instanceof Map) {\n        return 4 /* ObjectType.MAP */;\n    }\n    return 5 /* ObjectType.OTHER */;\n}\n/**\n * Get the keys of the given objects including symbol keys.\n *\n * Note: Only keys to enumerable properties are returned.\n *\n * @param objects - An array of objects to get the keys of.\n * @returns A set containing all the keys of all the given objects.\n */\nfunction getKeys(objects) {\n    const keys = new Set();\n    for (const object of objects) {\n        for (const key of [...Object.keys(object), ...Object.getOwnPropertySymbols(object)]) {\n            keys.add(key);\n        }\n    }\n    return keys;\n}\n/**\n * Does the given object have the given property.\n *\n * @param object - The object to test.\n * @param property - The property to test.\n * @returns Whether the object has the property.\n */\nfunction objectHasProperty(object, property) {\n    return typeof object === \"object\" && Object.prototype.propertyIsEnumerable.call(object, property);\n}\n/**\n * Get an iterable object that iterates over the given iterables.\n */\nfunction getIterableOfIterables(iterables) {\n    let mut_iterablesIndex = 0;\n    let mut_iterator = iterables[0]?.[Symbol.iterator]();\n    return {\n        [Symbol.iterator]() {\n            return {\n                next() {\n                    do {\n                        if (mut_iterator === undefined) {\n                            return { done: true, value: undefined };\n                        }\n                        const result = mut_iterator.next();\n                        if (result.done === true) {\n                            mut_iterablesIndex += 1;\n                            mut_iterator = iterables[mut_iterablesIndex]?.[Symbol.iterator]();\n                            continue;\n                        }\n                        return {\n                            done: false,\n                            value: result.value,\n                        };\n                    } while (true);\n                },\n            };\n        },\n    };\n}\n// eslint-disable-next-line unicorn/prefer-set-has -- Array is more performant for a low number of elements.\nconst validRecordToStringValues = [\"[object Object]\", \"[object Module]\"];\n/**\n * Does the given object appear to be a record.\n */\nfunction isRecord(value) {\n    // All records are objects.\n    if (!validRecordToStringValues.includes(Object.prototype.toString.call(value))) {\n        return false;\n    }\n    const { constructor } = value;\n    // If has modified constructor.\n    // eslint-disable-next-line ts/no-unnecessary-condition\n    if (constructor === undefined) {\n        return true;\n    }\n    const prototype = constructor.prototype;\n    // If has modified prototype.\n    if (prototype === null ||\n        typeof prototype !== \"object\" ||\n        !validRecordToStringValues.includes(Object.prototype.toString.call(prototype))) {\n        return false;\n    }\n    // If constructor does not have an Object-specific method.\n    // eslint-disable-next-line sonar/prefer-single-boolean-return, no-prototype-builtins\n    if (!prototype.hasOwnProperty(\"isPrototypeOf\")) {\n        return false;\n    }\n    // Most likely a record.\n    return true;\n}\n\n/**\n * The default strategy to merge records.\n *\n * @param values - The records.\n */\nfunction mergeRecords$1(values, utils, meta) {\n    const result = {};\n    for (const key of getKeys(values)) {\n        const propValues = [];\n        for (const value of values) {\n            if (objectHasProperty(value, key)) {\n                propValues.push(value[key]);\n            }\n        }\n        if (propValues.length === 0) {\n            continue;\n        }\n        const updatedMeta = utils.metaDataUpdater(meta, {\n            key,\n            parents: values,\n        });\n        const propertyResult = mergeUnknowns(propValues, utils, updatedMeta);\n        if (propertyResult === actions.skip) {\n            continue;\n        }\n        if (key === \"__proto__\") {\n            Object.defineProperty(result, key, {\n                value: propertyResult,\n                configurable: true,\n                enumerable: true,\n                writable: true,\n            });\n        }\n        else {\n            result[key] = propertyResult;\n        }\n    }\n    return result;\n}\n/**\n * The default strategy to merge arrays.\n *\n * @param values - The arrays.\n */\nfunction mergeArrays$1(values) {\n    return values.flat();\n}\n/**\n * The default strategy to merge sets.\n *\n * @param values - The sets.\n */\nfunction mergeSets$1(values) {\n    return new Set(getIterableOfIterables(values));\n}\n/**\n * The default strategy to merge maps.\n *\n * @param values - The maps.\n */\nfunction mergeMaps$1(values) {\n    return new Map(getIterableOfIterables(values));\n}\n/**\n * Get the last value in the given array.\n */\nfunction mergeOthers$1(values) {\n    return values.at(-1);\n}\n/**\n * The merge functions.\n */\nconst mergeFunctions = {\n    mergeRecords: mergeRecords$1,\n    mergeArrays: mergeArrays$1,\n    mergeSets: mergeSets$1,\n    mergeMaps: mergeMaps$1,\n    mergeOthers: mergeOthers$1,\n};\n\n/**\n * Deeply merge objects.\n *\n * @param objects - The objects to merge.\n */\nfunction deepmerge(...objects) {\n    return deepmergeCustom({})(...objects);\n}\nfunction deepmergeCustom(options, rootMetaData) {\n    const utils = getUtils(options, customizedDeepmerge);\n    /**\n     * The customized deepmerge function.\n     */\n    function customizedDeepmerge(...objects) {\n        return mergeUnknowns(objects, utils, rootMetaData);\n    }\n    return customizedDeepmerge;\n}\n/**\n * The the utils that are available to the merge functions.\n *\n * @param options - The options the user specified\n */\nfunction getUtils(options, customizedDeepmerge) {\n    return {\n        defaultMergeFunctions: mergeFunctions,\n        mergeFunctions: {\n            ...mergeFunctions,\n            ...Object.fromEntries(Object.entries(options)\n                .filter(([key, option]) => Object.hasOwn(mergeFunctions, key))\n                .map(([key, option]) => (option === false ? [key, mergeFunctions.mergeOthers] : [key, option]))),\n        },\n        metaDataUpdater: (options.metaDataUpdater ?? defaultMetaDataUpdater),\n        deepmerge: customizedDeepmerge,\n        useImplicitDefaultMerging: options.enableImplicitDefaultMerging ?? false,\n        filterValues: options.filterValues === false ? undefined : (options.filterValues ?? defaultFilterValues),\n        actions,\n    };\n}\n/**\n * Merge unknown things.\n *\n * @param values - The values.\n */\nfunction mergeUnknowns(values, utils, meta) {\n    const filteredValues = utils.filterValues?.(values, meta) ?? values;\n    if (filteredValues.length === 0) {\n        return undefined;\n    }\n    if (filteredValues.length === 1) {\n        return mergeOthers(filteredValues, utils, meta);\n    }\n    const type = getObjectType(filteredValues[0]);\n    if (type !== 0 /* ObjectType.NOT */ && type !== 5 /* ObjectType.OTHER */) {\n        for (let mut_index = 1; mut_index < filteredValues.length; mut_index++) {\n            if (getObjectType(filteredValues[mut_index]) === type) {\n                continue;\n            }\n            return mergeOthers(filteredValues, utils, meta);\n        }\n    }\n    switch (type) {\n        case 1 /* ObjectType.RECORD */: {\n            return mergeRecords(filteredValues, utils, meta);\n        }\n        case 2 /* ObjectType.ARRAY */: {\n            return mergeArrays(filteredValues, utils, meta);\n        }\n        case 3 /* ObjectType.SET */: {\n            return mergeSets(filteredValues, utils, meta);\n        }\n        case 4 /* ObjectType.MAP */: {\n            return mergeMaps(filteredValues, utils, meta);\n        }\n        default: {\n            return mergeOthers(filteredValues, utils, meta);\n        }\n    }\n}\n/**\n * Merge records.\n *\n * @param values - The records.\n */\nfunction mergeRecords(values, utils, meta) {\n    const result = utils.mergeFunctions.mergeRecords(values, utils, meta);\n    if (result === actions.defaultMerge ||\n        (utils.useImplicitDefaultMerging &&\n            result === undefined &&\n            utils.mergeFunctions.mergeRecords !== utils.defaultMergeFunctions.mergeRecords)) {\n        return utils.defaultMergeFunctions.mergeRecords(values, utils, meta);\n    }\n    return result;\n}\n/**\n * Merge arrays.\n *\n * @param values - The arrays.\n */\nfunction mergeArrays(values, utils, meta) {\n    const result = utils.mergeFunctions.mergeArrays(values, utils, meta);\n    if (result === actions.defaultMerge ||\n        (utils.useImplicitDefaultMerging &&\n            result === undefined &&\n            utils.mergeFunctions.mergeArrays !== utils.defaultMergeFunctions.mergeArrays)) {\n        return utils.defaultMergeFunctions.mergeArrays(values);\n    }\n    return result;\n}\n/**\n * Merge sets.\n *\n * @param values - The sets.\n */\nfunction mergeSets(values, utils, meta) {\n    const result = utils.mergeFunctions.mergeSets(values, utils, meta);\n    if (result === actions.defaultMerge ||\n        (utils.useImplicitDefaultMerging &&\n            result === undefined &&\n            utils.mergeFunctions.mergeSets !== utils.defaultMergeFunctions.mergeSets)) {\n        return utils.defaultMergeFunctions.mergeSets(values);\n    }\n    return result;\n}\n/**\n * Merge maps.\n *\n * @param values - The maps.\n */\nfunction mergeMaps(values, utils, meta) {\n    const result = utils.mergeFunctions.mergeMaps(values, utils, meta);\n    if (result === actions.defaultMerge ||\n        (utils.useImplicitDefaultMerging &&\n            result === undefined &&\n            utils.mergeFunctions.mergeMaps !== utils.defaultMergeFunctions.mergeMaps)) {\n        return utils.defaultMergeFunctions.mergeMaps(values);\n    }\n    return result;\n}\n/**\n * Merge other things.\n *\n * @param values - The other things.\n */\nfunction mergeOthers(values, utils, meta) {\n    const result = utils.mergeFunctions.mergeOthers(values, utils, meta);\n    if (result === actions.defaultMerge ||\n        (utils.useImplicitDefaultMerging &&\n            result === undefined &&\n            utils.mergeFunctions.mergeOthers !== utils.defaultMergeFunctions.mergeOthers)) {\n        return utils.defaultMergeFunctions.mergeOthers(values);\n    }\n    return result;\n}\n\n/**\n * The default strategy to merge records into a target record.\n *\n * @param mut_target - The result will be mutated into this record\n * @param values - The records (including the target's value if there is one).\n */\nfunction mergeRecordsInto$1(mut_target, values, utils, meta) {\n    for (const key of getKeys(values)) {\n        const propValues = [];\n        for (const value of values) {\n            if (objectHasProperty(value, key)) {\n                propValues.push(value[key]);\n            }\n        }\n        if (propValues.length === 0) {\n            continue;\n        }\n        const updatedMeta = utils.metaDataUpdater(meta, {\n            key,\n            parents: values,\n        });\n        const propertyTarget = { value: propValues[0] };\n        mergeUnknownsInto(propertyTarget, propValues, utils, updatedMeta);\n        if (key === \"__proto__\") {\n            Object.defineProperty(mut_target.value, key, {\n                value: propertyTarget.value,\n                configurable: true,\n                enumerable: true,\n                writable: true,\n            });\n        }\n        else {\n            mut_target.value[key] = propertyTarget.value;\n        }\n    }\n}\n/**\n * The default strategy to merge arrays into a target array.\n *\n * @param mut_target - The result will be mutated into this array\n * @param values - The arrays (including the target's value if there is one).\n */\nfunction mergeArraysInto$1(mut_target, values) {\n    mut_target.value.push(...values.slice(1).flat());\n}\n/**\n * The default strategy to merge sets into a target set.\n *\n * @param mut_target - The result will be mutated into this set\n * @param values - The sets (including the target's value if there is one).\n */\nfunction mergeSetsInto$1(mut_target, values) {\n    for (const value of getIterableOfIterables(values.slice(1))) {\n        mut_target.value.add(value);\n    }\n}\n/**\n * The default strategy to merge maps into a target map.\n *\n * @param mut_target - The result will be mutated into this map\n * @param values - The maps (including the target's value if there is one).\n */\nfunction mergeMapsInto$1(mut_target, values) {\n    for (const [key, value] of getIterableOfIterables(values.slice(1))) {\n        mut_target.value.set(key, value);\n    }\n}\n/**\n * Set the target to the last value.\n */\nfunction mergeOthersInto$1(mut_target, values) {\n    mut_target.value = values.at(-1);\n}\n/**\n * The merge functions.\n */\nconst mergeIntoFunctions = {\n    mergeRecords: mergeRecordsInto$1,\n    mergeArrays: mergeArraysInto$1,\n    mergeSets: mergeSetsInto$1,\n    mergeMaps: mergeMapsInto$1,\n    mergeOthers: mergeOthersInto$1,\n};\n\nfunction deepmergeInto(target, ...objects) {\n    return void deepmergeIntoCustom({})(target, ...objects);\n}\nfunction deepmergeIntoCustom(options, rootMetaData) {\n    const utils = getIntoUtils(options, customizedDeepmergeInto);\n    /**\n     * The customized deepmerge function.\n     */\n    function customizedDeepmergeInto(target, ...objects) {\n        mergeUnknownsInto({ value: target }, [target, ...objects], utils, rootMetaData);\n    }\n    return customizedDeepmergeInto;\n}\n/**\n * The the utils that are available to the merge functions.\n *\n * @param options - The options the user specified\n */\nfunction getIntoUtils(options, customizedDeepmergeInto) {\n    return {\n        defaultMergeFunctions: mergeIntoFunctions,\n        mergeFunctions: {\n            ...mergeIntoFunctions,\n            ...Object.fromEntries(Object.entries(options)\n                .filter(([key, option]) => Object.hasOwn(mergeIntoFunctions, key))\n                .map(([key, option]) => (option === false ? [key, mergeIntoFunctions.mergeOthers] : [key, option]))),\n        },\n        metaDataUpdater: (options.metaDataUpdater ?? defaultMetaDataUpdater),\n        deepmergeInto: customizedDeepmergeInto,\n        filterValues: options.filterValues === false ? undefined : (options.filterValues ?? defaultFilterValues),\n        actions: actionsInto,\n    };\n}\n/**\n * Merge unknown things into a target.\n *\n * @param mut_target - The target to merge into.\n * @param values - The values.\n */\nfunction mergeUnknownsInto(mut_target, values, utils, meta) {\n    const filteredValues = utils.filterValues?.(values, meta) ?? values;\n    if (filteredValues.length === 0) {\n        return;\n    }\n    if (filteredValues.length === 1) {\n        return void mergeOthersInto(mut_target, filteredValues, utils, meta);\n    }\n    const type = getObjectType(mut_target.value);\n    if (type !== 0 /* ObjectType.NOT */ && type !== 5 /* ObjectType.OTHER */) {\n        for (let mut_index = 1; mut_index < filteredValues.length; mut_index++) {\n            if (getObjectType(filteredValues[mut_index]) === type) {\n                continue;\n            }\n            return void mergeOthersInto(mut_target, filteredValues, utils, meta);\n        }\n    }\n    switch (type) {\n        case 1 /* ObjectType.RECORD */: {\n            return void mergeRecordsInto(mut_target, filteredValues, utils, meta);\n        }\n        case 2 /* ObjectType.ARRAY */: {\n            return void mergeArraysInto(mut_target, filteredValues, utils, meta);\n        }\n        case 3 /* ObjectType.SET */: {\n            return void mergeSetsInto(mut_target, filteredValues, utils, meta);\n        }\n        case 4 /* ObjectType.MAP */: {\n            return void mergeMapsInto(mut_target, filteredValues, utils, meta);\n        }\n        default: {\n            return void mergeOthersInto(mut_target, filteredValues, utils, meta);\n        }\n    }\n}\n/**\n * Merge records into a target record.\n *\n * @param mut_target - The target to merge into.\n * @param values - The records.\n */\nfunction mergeRecordsInto(mut_target, values, utils, meta) {\n    const action = utils.mergeFunctions.mergeRecords(mut_target, values, utils, meta);\n    if (action === actionsInto.defaultMerge) {\n        utils.defaultMergeFunctions.mergeRecords(mut_target, values, utils, meta);\n    }\n}\n/**\n * Merge arrays into a target array.\n *\n * @param mut_target - The target to merge into.\n * @param values - The arrays.\n */\nfunction mergeArraysInto(mut_target, values, utils, meta) {\n    const action = utils.mergeFunctions.mergeArrays(mut_target, values, utils, meta);\n    if (action === actionsInto.defaultMerge) {\n        utils.defaultMergeFunctions.mergeArrays(mut_target, values);\n    }\n}\n/**\n * Merge sets into a target set.\n *\n * @param mut_target - The target to merge into.\n * @param values - The sets.\n */\nfunction mergeSetsInto(mut_target, values, utils, meta) {\n    const action = utils.mergeFunctions.mergeSets(mut_target, values, utils, meta);\n    if (action === actionsInto.defaultMerge) {\n        utils.defaultMergeFunctions.mergeSets(mut_target, values);\n    }\n}\n/**\n * Merge maps into a target map.\n *\n * @param mut_target - The target to merge into.\n * @param values - The maps.\n */\nfunction mergeMapsInto(mut_target, values, utils, meta) {\n    const action = utils.mergeFunctions.mergeMaps(mut_target, values, utils, meta);\n    if (action === actionsInto.defaultMerge) {\n        utils.defaultMergeFunctions.mergeMaps(mut_target, values);\n    }\n}\n/**\n * Merge other things into a target.\n *\n * @param mut_target - The target to merge into.\n * @param values - The other things.\n */\nfunction mergeOthersInto(mut_target, values, utils, meta) {\n    const action = utils.mergeFunctions.mergeOthers(mut_target, values, utils, meta);\n    if (action === actionsInto.defaultMerge || mut_target.value === actionsInto.defaultMerge) {\n        utils.defaultMergeFunctions.mergeOthers(mut_target, values);\n    }\n}\n\nexport { deepmerge, deepmergeCustom, deepmergeInto, deepmergeIntoCustom, getKeys, getObjectType, objectHasProperty };\n"],
  "mappings": "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",
  "names": ["ObjectType"]
}
