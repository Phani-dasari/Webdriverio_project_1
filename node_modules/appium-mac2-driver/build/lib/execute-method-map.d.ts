export declare const executeMethodMap: {
    readonly 'macos: click': {
        readonly command: "macosClick";
        readonly params: {
            readonly optional: readonly ["elementId", "x", "y", "keyModifierFlags"];
        };
    };
    readonly 'macos: scroll': {
        readonly command: "macosScroll";
        readonly params: {
            readonly required: readonly ["deltaX", "deltaY"];
            readonly optional: readonly ["elementId", "x", "y", "keyModifierFlags"];
        };
    };
    readonly 'macos: swipe': {
        readonly command: "macosSwipe";
        readonly params: {
            readonly required: readonly ["direction"];
            readonly optional: readonly ["elementId", "x", "y", "velocity", "keyModifierFlags"];
        };
    };
    readonly 'macos: rightClick': {
        readonly command: "macosRightClick";
        readonly params: {
            readonly optional: readonly ["elementId", "x", "y", "keyModifierFlags"];
        };
    };
    readonly 'macos: hover': {
        readonly command: "macosHover";
        readonly params: {
            readonly optional: readonly ["elementId", "x", "y", "keyModifierFlags"];
        };
    };
    readonly 'macos: doubleClick': {
        readonly command: "macosDoubleClick";
        readonly params: {
            readonly optional: readonly ["elementId", "x", "y", "keyModifierFlags"];
        };
    };
    readonly 'macos: clickAndDrag': {
        readonly command: "macosClickAndDrag";
        readonly params: {
            readonly required: readonly ["duration"];
            readonly optional: readonly ["sourceElementId", "destinationElementId", "startX", "startY", "endX", "endY", "keyModifierFlags"];
        };
    };
    readonly 'macos: clickAndDragAndHold': {
        readonly command: "macosClickAndDragAndHold";
        readonly params: {
            readonly required: readonly ["duration", "holdDuration"];
            readonly optional: readonly ["sourceElementId", "destinationElementId", "startX", "startY", "endX", "endY", "velocity", "keyModifierFlags"];
        };
    };
    readonly 'macos: keys': {
        readonly command: "macosKeys";
        readonly params: {
            readonly required: readonly ["keys"];
            readonly optional: readonly ["elementId"];
        };
    };
    readonly 'macos: tap': {
        readonly command: "macosTap";
        readonly params: {
            readonly optional: readonly ["elementId", "x", "y", "keyModifierFlags"];
        };
    };
    readonly 'macos: doubleTap': {
        readonly command: "macosDoubleTap";
        readonly params: {
            readonly optional: readonly ["elementId", "x", "y", "keyModifierFlags"];
        };
    };
    readonly 'macos: press': {
        readonly command: "macosPressAndHold";
        readonly params: {
            readonly required: readonly ["duration"];
            readonly optional: readonly ["elementId", "x", "y", "keyModifierFlags"];
        };
    };
    readonly 'macos: pressAndDrag': {
        readonly command: "macosPressAndDrag";
        readonly params: {
            readonly required: readonly ["duration"];
            readonly optional: readonly ["sourceElementId", "destinationElementId", "startX", "startY", "endX", "endY", "keyModifierFlags"];
        };
    };
    readonly 'macos: pressAndDragAndHold': {
        readonly command: "macosPressAndDragAndHold";
        readonly params: {
            readonly required: readonly ["duration", "holdDuration"];
            readonly optional: readonly ["sourceElementId", "destinationElementId", "startX", "startY", "endX", "endY", "velocity", "keyModifierFlags"];
        };
    };
    readonly 'macos: source': {
        readonly command: "macosSource";
        readonly params: {
            readonly optional: readonly ["format"];
        };
    };
    readonly 'macos: deepLink': {
        readonly command: "macosDeepLink";
        readonly params: {
            readonly required: readonly ["url"];
            readonly optional: readonly ["bundleId"];
        };
    };
    readonly 'macos: screenshots': {
        readonly command: "macosScreenshots";
        readonly params: {
            readonly optional: readonly ["displayId"];
        };
    };
    readonly 'macos: appleScript': {
        readonly command: "macosExecAppleScript";
        readonly params: {
            readonly optional: readonly ["script", "language", "command", "cwd", "timeout"];
        };
    };
    readonly 'macos: launchApp': {
        readonly command: "macosLaunchApp";
        readonly params: {
            readonly optional: readonly ["bundleId", "path", "arguments", "environment"];
        };
    };
    readonly 'macos: activateApp': {
        readonly command: "macosActivateApp";
        readonly params: {
            readonly optional: readonly ["bundleId", "path"];
        };
    };
    readonly 'macos: terminateApp': {
        readonly command: "macosTerminateApp";
        readonly params: {
            readonly optional: readonly ["bundleId", "path"];
        };
    };
    readonly 'macos: queryAppState': {
        readonly command: "macosQueryAppState";
        readonly params: {
            readonly optional: readonly ["bundleId", "path"];
        };
    };
    readonly 'macos: startRecordingScreen': {
        readonly command: "startRecordingScreen";
        readonly params: {
            readonly required: readonly ["deviceId"];
            readonly optional: readonly ["timeLimit", "videoFilter", "fps", "preset", "captureCursor", "captureClicks", "forceRestart"];
        };
    };
    readonly 'macos: stopRecordingScreen': {
        readonly command: "stopRecordingScreen";
        readonly params: {
            readonly optional: readonly ["remotePath", "user", "pass", "method", "headers", "fileFieldName", "formFields"];
        };
    };
    readonly 'macos: startNativeScreenRecording': {
        readonly command: "macosStartNativeScreenRecording";
        readonly params: {
            readonly optional: readonly ["fps", "codec", "displayId"];
        };
    };
    readonly 'macos: getNativeScreenRecordingInfo': {
        readonly command: "macosGetNativeScreenRecordingInfo";
    };
    readonly 'macos: stopNativeScreenRecording': {
        readonly command: "macosStopNativeScreenRecording";
        readonly params: {
            readonly optional: readonly ["remotePath", "user", "pass", "method", "headers", "fileFieldName", "formFields", "ignorePayload"];
        };
    };
    readonly 'macos: listDisplays': {
        readonly command: "macosListDisplays";
    };
};
//# sourceMappingURL=execute-method-map.d.ts.map