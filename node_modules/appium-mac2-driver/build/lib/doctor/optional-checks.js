"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.optionalAutomationModeCheck = exports.OptionalAutomationModeCheck = exports.optionalFfmpegCheck = exports.OptionalFfmpegCheck = void 0;
const utils_1 = require("./utils");
const support_1 = require("appium/support");
const teen_process_1 = require("teen_process");
require("@colors/colors");
/** @satisfies {import('@appium/types').IDoctorCheck} */
class OptionalFfmpegCheck {
    constructor() {
        this.FFMPEG_BINARY = 'ffmpeg';
        this.FFMPEG_INSTALL_LINK = 'https://www.ffmpeg.org/download.html';
    }
    async diagnose() {
        const ffmpegPath = await (0, utils_1.resolveExecutablePath)(this.FFMPEG_BINARY);
        return ffmpegPath
            ? support_1.doctor.okOptional(`${this.FFMPEG_BINARY} exists at '${ffmpegPath}'`)
            : support_1.doctor.nokOptional(`${this.FFMPEG_BINARY} cannot be found`);
    }
    async fix() {
        return (`${`${this.FFMPEG_BINARY}`.bold} is used to capture screen recordings. ` +
            `Please read ${this.FFMPEG_INSTALL_LINK}.`);
    }
    hasAutofix() {
        return false;
    }
    isOptional() {
        return true;
    }
}
exports.OptionalFfmpegCheck = OptionalFfmpegCheck;
exports.optionalFfmpegCheck = new OptionalFfmpegCheck();
/** @satisfies {import('@appium/types').IDoctorCheck} */
class OptionalAutomationModeCheck {
    async diagnose() {
        let stdout;
        try {
            ({ stdout } = await (0, teen_process_1.exec)('automationmodetool'));
        }
        catch (err) {
            return support_1.doctor.nokOptional(`Cannot run 'automationmodetool': ${err.stderr || err.message}`);
        }
        if (stdout.includes('DOES NOT REQUIRE')) {
            return support_1.doctor.okOptional(`Automation Mode does not require user authentication`);
        }
        return support_1.doctor.nokOptional(`Automation Mode requires user authentication`);
    }
    async fix() {
        return `Run \`automationmodetool enable-automationmode-without-authentication\` to disable Automation Mode authentication`;
    }
    hasAutofix() {
        return false;
    }
    isOptional() {
        return true;
    }
}
exports.OptionalAutomationModeCheck = OptionalAutomationModeCheck;
exports.optionalAutomationModeCheck = new OptionalAutomationModeCheck();
//# sourceMappingURL=optional-checks.js.map